# =====================================================================================================================
# Разработайте программное обеспечение для ведения журнала событий. Вам необходимо создать класс, который будет
# представлять строки журнала и включать в себя информацию об авторе и времени создания каждой записи.
# Условие задачи:
#
# Создайте класс MyStr, который наследуется от встроенного класса str и добавлять дополнительную информацию о
# создателе строки и времени ее создания. Этот класс будет представлять строки с информацией о событиях.
#
# Класс MyStr должен иметь следующие атрибуты и методы:
# value (str): Строковое значение с описанием события.
# author (str): Имя автора, создавшего запись.
# time: Время создания записи в формате '%Y-%m-%d %H:%M'.
#
# Магические методы (Dunder-методы):
#
# Реализуйте метод __new__(cls, value, author), который создает новый объект класса MyStr с заданным value и author.
# Метод также автоматически фиксирует время создания записи. В этом методе создается новый объект MyStr с указанными
# атрибутами и текущим временем в атрибуте time.
# Реализуйте метод __str__(self), который возвращает строковое представление объекта класса MyStr с информацией о
# событии, авторе и времени создания.
# Реализуйте метод __repr__(self), который возвращает строковое представление объекта класса MyStr.
# Метод __repr__ возвращает строку, которая может быть использована для создания точно такого же объектаMyStrс теми же
# значениямиvalueиauthor`.
# =========================================================================================================================


import time
from datetime import datetime


class MyStr(str):
    """
    Класс для создания строки с информацией об авторе и времени создания.

    Атрибуты:
    value (str): строковое значение.
    author (str): имя автора.

    Dunder методы:
    __new__(cls, value, author): создает новый объект класса.
    __str__(): возвращает строковое представление объекта класса.
    __repr__(): возвращает строковое представление объекта класса для отладки.

    """
    def __new__(cls, value, author):
        instance = super().__new__(cls, value)
        instance.author = author
        instance.time = time.time()
        return instance

    def __str__(self):
        formatted_time = datetime.fromtimestamp(
            self.time).strftime('%Y-%m-%d %H:%M')
        return f"{super().__str__()} (Автор: {self.author}, Время создания: {formatted_time})"

    def __repr__(self):
        return f"MyStr('{super().__str__()}', '{self.author}')"


event = MyStr("Завершилось тестирование", "John")
print(event)


##############################################################################################################################

# В этом коде:
# __new__ - это специальный метод, который вызывается при создании нового объекта класса.
# Он принимает класс и аргументы, передаваемые в конструктор,
# и возвращает новый экземпляр класса. В данном случае, он создает новый экземпляр строки
# с заданным значением, а также устанавливает атрибуты author
# и time для этого экземпляра 8.
# __str__ - это другой специальный метод, который возвращает строковое представление объекта.
# В данном случае, он возвращает исходное строковое значение,
# а также информацию об авторе и времени создания 3.
# __repr__ - это еще один специальный метод, который возвращает строковое представление объекта,
# которое можно использовать для отладки. В данном случае,
# он возвращает строковое представление исходного значения и имени автора 8.
# datetime.fromtimestamp(self.time).strftime('%Y-%m-%d %H:%M') - это способ преобразовать timestamp
# в читаемую дату и время.
